[{"title":"canvas使用方式以及相关属性","date":"2017-02-14T03:30:34.000Z","path":"2017/02/14/canvas使用方式以及相关属性/","text":"Canvas绘制会用到的方法：1、ctx.moveTo(x,y):将绘图工具移动到x,y坐标点2、ctx.lineTo(x,y):将绘图工具从上一个点到x,y点虚描一条线3、ctx.stroke():将虚描的内容使用实线绘制出来。4、ctx.fill();在绘制好的图形中填充颜色（默认黑色）.5、fill会将起始点（moveTo）和结束点(最后一个lineTo)连起来，然后在形成的图形中填充黑色。6、ctx.closePath():将绘图的起始点绘图的结束点进行连接，最后闭合图形。7、ctx.beginPath():开启新路径。8、ctx.setLineDash([数组]) :设置虚线的数组，当划线的时候采用这个数组中的数字作为虚线的数据9、ctx.getLineDash():获取虚线的数组 Canvas绘制使用到的属性：1、ctx.lineWidth = 10; 设置绘图的线宽2、ctx.lineCap = “round”; 设置线帽3、ctx.lineJoin = ‘round’; 设置线拐4、ctx.lineDashOffset = 值; 设置虚线的缩进5、ctx.strokeStyle = ‘red’; 设置描边的颜色6、ctx.fillStyle =’green’; 设置填充的颜色 非零环绕原则：如果想要对一块区域进行填充，我们需要使用非零环绕原则来判断是否进行填充在这一块区域随便选一个点，随便向任意方向拉出去到外面的一个L线，此时如果画的图的线条穿过L线时是顺时针的，那么就记做+1此时如果画的图的线条穿过L线时是逆时针的，那么就记做-1最后把所有记录的值进行求和，如果为0，代表不填充，其他情况要填充。 绘制矩形的三种方法1、ctx.rect(x,y,width,height); //只会描边，所以必须配合stroke()或fill()。 ctx.stroke();2、ctx.strokeRect(x,y,width,height); //画一个描边矩形3、ctx.fillRect(x,y,width,height); //画一个填充矩形 清除矩形区域：clearRect(x,y,width,height); 清理整块画布内容:1、ctx.c0learRect(0,0,canvas.width,canvas.height);2、canvas.width = canvas.width;//当设置canvas的宽度或者高度的时候，会刷新canvas画布，此时画布中原有的绘制内容，全部都会被刷新（清除）。 画圆弧ctx.arc(圆心的x坐标，圆心的y坐标，圆的半径，圆开始的弧度，圆结束的弧度，按照顺时针或逆时针的方向进行绘制);零度角位于圆心水平向右的位置，顺时针为正方向（正弧度），逆时针为负方向（负弧度）。 绘制文本1、strokeText(文本字符串,x,y)2、fillText(文本字符串,x,y)默认情况下，文本的左下角对齐x,y坐标点，可以通过font属性来设置文本的大小和字体：ctx.font = ‘字体大小 字体’;文本对其方式： A.水平对齐 ctx.textalign = &apos;left&apos;,&apos;center&apos;,&apos;right&apos;; B.基线对象 ctx.textBaseline = ‘top’,’middle’,’bottom’; 画图片drawImage(image,x,y) 计时器模型var id = setInterval(function(){ if(){ }else{ }}); 变换的概念计算机是利用坐标进行绘图；变换就是一套数学公式，可以记录坐标轴的变化方式；利用坐标抽变换可以绘制出根据不同坐标轴特点形成的图形。canvas变换： ctx.translate() 平移 ctx.rotate() 旋转 ctx.scale() 伸缩状态保存:save() 状态恢复:restore() konva:是一个完全面向对象的框架,他所有的内容都是通过对象操作完成。 1、3个主要必须用到的对象: 1)、舞台对象（Stage） 2)、层对象（Layer） 3)、矩形对象，圆形对象 2、使用konva来绘制图形的步骤 A.引入konva.js库文件 B.创建一个舞台对象：var stage = new Konva.Stage({ width:600,height:400,container:divid }); C.创建一个层对象：var layer = new Konva.Layer(); D.创建图形对象：var juxing = new Konva.Rect({x:10,y:10,width:100,height:100,fill:pink}); E.要把图形对象放到层里去，层要放到舞台对象里去 layer.add(juxing); stage.add(layer); 3、重绘：draw() 如果将层添加到了舞台上之后，又在层上绘制了一些别的图形，为了让后面绘制的图形可以显示出来我们必须要重绘一次层。例：layer.draw();","tags":[{"name":"canvas html5","slug":"canvas-html5","permalink":"http://echogong.club/tags/canvas-html5/"}]},{"title":"函数的四种调用模式","date":"2016-12-14T03:16:23.000Z","path":"2016/12/14/函数的四种调用模式/","text":"函数模式 函数的定义方式；1）声明式2）表达式式3）Function 独立调用的就是函数(函数名（参数）)； this表示的是全局对象； 任何自调用函数都是函数模式。 方法调用模式 区分方式 方法本身就是函数，但方法不是单独独立的调用，而是通过一个对象引导调用（通过宿主对象来调用函数）； 对象.方法（参数） 数组n; ==&gt;this是数组对象 this表示的是引导方法的对象var length = 10;function fn(){console.log(this,length);}var obj = {length:5,method:function(){fn(); arguments[0](); }};obj.method(fn,0); 构造器（构造函数、构造方法）模式 区分 使用new关键字引导 执行步骤 var p = new Person(); new是一个专门的运算符，专门用来创建对象，创建出来的对象传递给构造函数的this利用构造函数对其初始化。 返回值 如果不写return语句，那么构造函数默认返回this； 如果在构造函数中写上return语句，并紧跟基本类型，就忽略返回数据；function Person(){ return; this.age=20;}var p1=new Person();console.log(p1); //返回Person(){} 如果在构造函数中写上return语句，并紧跟引用类型，那么构造函数返回该引用类型数据，而忽略this。 如果调用构造函数的时候，构造函数没有参数，圆括号是可以省略的。比如：var p1 = new Person; 小结1）如果构造函数没有参数，可以省略圆括号2）如果希望创建对象并直接调用其方法可以省略调整结构性的圆括号 如果要省略构造函数的圆括号，就必须添加结构性的圆括号 上下文模式（借调）环境调用模式 ==》 在不同环境下的不同调用模式，简单的说就是一种格式，可以实现函数模式与方法模式 语法1)call形式：函数名.call（…）; 在使用call调用的时候，函数参数必须以数组的形式存在，但是有些时候数组封装比较复杂，所以引入call调用与apply完全相同，唯一不同的是参数不需要使用数组。2）apply形式：函数名.apply(…); apply使用的语法结构：让函数以函数模式调用： foo.apply(null)或foo.apply() 让函数以方法调用模式调用，需要提供一个宿主对象： foo.apply(o)；//该方法调用，不会污染宿主对象，不必要宿主对象，必须包含该方法。 两种形式功能完全一样，唯一不同的是参数的形式。 用法存在上下文调用的目的是为了实现借用方法。function foo(){console.log(this);}var o = {name:’jim’};foo(); //函数调用o.func = foo; //方法调用o.func(); 带有参数的函数实现上下文调用function foo(num1,num2){ console.log(this); return num1+num2; }函数调用模式: var res1 = foo(123.567);方法调用模式: var o = {name:’jim’}; o.func = foo; var res2 = o.func(123,567);使用apply进行调用，如果函数是带参数的，apply的第一个参数要么是null，要么是对象。如果null就是函数调用，如果对象就是方法对象，该对象就是宿主对象，后面紧跟一个数组参数，将函数放在参数依次放在数组中。例如：函数模式 foo（123,567） apply foo.apply（null,[123,567]） call和apply方法效果都是一样的，都可以实现调用 函数名.apply（宿主对象，[参数1，参数2，…]）; 函数名.call（this，参数1，参数2，…，）； 函数中的this函数中的this是由调用函数的模式来决定的 1、函数调用模式 this：window 2、方法调用模式 this：调用方法的对象 3、构造器调用模式 this：new出来的空对象 4、上下文（借调）模式 使用函数调用模式，this就是window 使用方法调用函数this就是宿主对象；利用构造函数实现继承(重点)function Car(name,type){ this.name=name; this.type=typt; } function BMW (name,type,price){ Car.call(this,name,type); this.prce = price;} *bind调用 1)bind方法：给函数绑定一个对象，当我们调用函数的时候，好像就是在用这个对象调用这个函数一样。例如：var fix = {name,’fix’}; var fn = foo.bind(fix); function foo(){ console.log(this); } fn(); //相当于fix.foo() bind是函数绑定对象的一种用法，函数本身就是可以调用，但是如果想要作为方法调用，就必须传入宿主对象，并且使用call或apply形式。 bind使得函数可以与某一对象绑定起来，那么在调用函数的时候，就好像是该对象在调用方法。 语法：函数.bind（对象）2)Object.prototype的成员 1)constructor 2)hasOwnProperty，判断该属性是否为自己提供的 3）propertyIsEnumerable 判断属性是否可以枚举 4）isPrototypeOf 判断是否为原型对象 包装对象 基本数据类型理论上应该不包含方法，但是在js中为了更好的使用数据，为三个基本类型提供了相应的对象Number、String、Boolean 基本数据转换成包装类型：基本数据.方法（）； apply，call进行借调的时候 转换过程中，当调用方法的时候，创建一个包装类型包装基本数据，然后调用方法，最后返回结果，删除包装类型的对象。getter和setter的语法糖 语法糖：为了方便开发而给出的语法结构 语法结构：function fn(){ var name; return{ get name(){return num；}， set name(v){num=v} } } var obj = fn(); obj.name; //调用里面的name方法ES5扩展 部分数组方法 1）forEach 遍历数组语法：要遍历的目标数组名.forEach（function(索引值，元素){}）; 2)map 映射，返回一个数组，数组的每一个元素就是map函数中fn的返回值。原来数组中有几个元素，映射完了还是那几个元素。语法：数组.map(fn); 3)filter 筛选语法：数组.filter（function（索引值，元素）{return true/false}）;(元素值可以省略) 4)some 逻辑判断 数组中至少有一个数据符合要求就返回true否则就返回false（了解。不是很常用） 语法：var istrue = arr.some(function(v){return typeof = ‘number’;});(v是索引值)（了解。不是很常用） 5)every 逻辑判断 必须满足所有元素都符合要求才会返回true 6)indexOf 在数组中查找该元素，如果含有该元素，返回元素需要（索引），否则返回-1； 7)lastIndexOf 从右往左找，功能与indexOf一样","tags":[{"name":"javascript 面向对象","slug":"javascript-面向对象","permalink":"http://echogong.club/tags/javascript-面向对象/"}]},{"title":"webpack常用命令行","date":"2016-12-13T13:18:16.000Z","path":"2016/12/13/webpack常用命令行/","text":"webpack 核心程序 webpack-dev-server 开发服务器 刷新页面模式 webpack-merge 合并设定使用(webpack.config.js) css-loader 编译css style-loader把编译后的css整合进html file-loader 编译文件资源 url-loader 编译汇入文件类型的资源，把文件转换成base64等 babel-loader 编译处理汇入ES2015类型的文件 babel-plugin-transform-runtime:polyfiling套件(依赖babel-runtime) babel-presetes2015:es2015 babel-preset-stage-0:开启草稿阶段的功能 babel-runtime:ES2015+的支持helpers,polyfilling函数库 vue-html-loader 编译vue的template部分 vue-style-loader 编译vue样式部分 vue-hot-reload-api:Hot reload API for vue components vue-loader 编译汇入vue组件 url-loader用于在js中加载png/jpg格式的文件 css/style loader用于加载css文件 less-loader加载器是将less编译成css文件-","tags":[{"name":"webpack","slug":"webpack","permalink":"http://echogong.club/tags/webpack/"}]},{"title":"markdown基本语法","date":"0201-10-14T03:02:57.000Z","path":"0201/10/14/markdown基本语法/","text":"标题：文字开头加“#”，一共分为1~6级，1级标题字体最大；块注释：文字开头加“&gt;”；斜体：文字两端使用1个”“或者”-“夹起来；粗体：文字两端使用2个”“或者”-“夹起来；无序列表：文字开头添加“+”或“and-”；有序列表：数字后面跟上句号；链接：内联方式，This is an example link 引用方式，[google][1]图片：内联方式：!alt text 引用方式： ![alt text][id]或[id]:图片路径 “title”HTML代码：简单的代码块: 大片的文字：teb和四个空格注脚：hello[^hello]或[^hello]:hi下划线：空白行下方添加三条“-”横线","tags":[{"name":"markdown","slug":"markdown","permalink":"http://echogong.club/tags/markdown/"}]}]